p = MixedIntegerLinearProgram(maximization=True)
v = p.new_variable(real=false)

p.set_objective(v[0])

p.add_constraint(1 <= v[1] + v[2] + v[3] + v[4] + v[5] + v[6] + v[7] <= 1)

p.add_constraint(0 <= 1/3*v[2] + 1/3*v[3] + 1/3*v[4] + v[5] + v[6] + v[7] - v[0])
p.add_constraint(0 <= -1/3*v[1] + 1/3*v[5] + 2/3*v[6] + v[7] - v[0])
p.add_constraint(0 <= -1/3*v[1] - v[0])
p.add_constraint(0 <= -1/3*v[1] + 1/3*v[5] - 1/3*v[6] - v[7] - v[0])
p.add_constraint(0 <= -v[1] - 1/3*v[2] - 1/3*v[4] + 1/3*v[6] + v[7] - v[0])
p.add_constraint(0 <= -v[1] - 2/3*v[2] + 1/3*v[4] - 1/3*v[5] - v[0])
p.add_constraint(0 <= -v[1] - v[2] + v[4] -v[5] - v[0])

p.add_constraint(0 <= v[1])
p.add_constraint(0 <= v[2])
p.add_constraint(0 <= v[3])
p.add_constraint(0 <= v[4])
p.add_constraint(0 <= v[5])
p.add_constraint(0 <= v[6])
p.add_constraint(0 <= v[7])

p.show()
p.solve()
p.get_values(v)
v = p.get_values(v)
print("(0,0,6)",v[1])
print("(0,1,5)",v[2])
print("(0,2,4)",v[3])
print("(0,3,3)",v[4])
print("(1,1,4)",v[5])
print("(1,2,3)",v[6])
print("(2,2,2)",v[7])