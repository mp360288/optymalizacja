import numpy as np
f=open('0.in',"r")
file=f.read()
Bw = []
Bu = []
Rw = []
Ru = []
A = []
print('Wczytywanie danych...')
s =''
for row in file:
    for x in row:
        if ((x != '\n') and (x != ' ')):
            s+= str(x)
        else:
            A.append(int(s))
            s = ''
f.close() 
print('Gotowe!')
N = A[0]
A1 = A[1:len(A)]
for i in range(len(A1)):
    if i%4 == 0:
        Bw.append(A1[i])
    if i%4 == 1:
        Bu.append(A1[i])
    if i%4 == 2:
        Rw.append(A1[i])
    if i%4 == 3:
        Ru.append(A1[i])       
W = []
U = []
for i in range(N):
    W.append([0]*N)
    U.append([0]*N)
for i in range(len(Bw)):
    if Bw[i] != i:
        W[i][Bw[i]] = -1
    W[i][i] = 1
for i in range(len(Bu)):
    if Bu[i] != i:
        U[i][Bu[i]] = -1
    U[i][i] = 1
W1 = np.matrix(W)
U1 = np.matrix(U)
print('Odwracanie macierzy...')
#print(W1)
W2 = np.linalg.inv(W1)
U2 = np.linalg.inv(U1)
#print(U2)
#print(W2)
K=np.c_[W2,U2]
#print(K)
K=K.tolist()
B=Rw+Ru
print('Gotowe!')
print('Formulowanie problemu liniowego...')
p = MixedIntegerLinearProgram(maximization=False, solver = "GLPK")
x = p.new_variable(integer=True, nonnegative=True)
p.set_binary(x)

p.set_objective(p.sum(x[j] for j in range(N) ))
for i in range(2*N):
    p.add_constraint(p.sum(x[j]*K[j][i] for j in range(N) ), min =B[i] )
#p.show()
print('Zaczynam rozwiazywanie problemu liniowego...')
p.solve()
odp = p.get_objective_value()
y = p.get_values(x)
f=open('0.out',"w")
f.write(str(N - int(odp)))
f.write('\n')
for i in range(N):
    if (y[i] == 0): 
        f.write(str(i)+' ')
f.close() 
print('Gotowe!')